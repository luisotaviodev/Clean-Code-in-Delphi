unit uLocacao;

interface

uses uCliente, uVeiculo, untExceptions, untEnums, System.DateUtils, System.SysUtils;

type
 TLocacao = class
  private
    FCliente      : TCliente;
    FTotal        : Currency;
    FDataLocacao  : TDateTime;
    FId           : Integer;
    FDataDevolucao: TDateTime;
    FVeiculo      : TVeiculo;
    FHash: String;
    FVeiculoAtual: TVeiculo;
    procedure SetCliente(const Value: TCliente);
    procedure SetDataDevolucao(const Value: TDateTime);
    procedure SetDataLocacao(const Value: TDateTime);
    procedure SetId(const Value: Integer);
    procedure SetTotal(const Value: Currency);
    procedure SetVeiculo(const Value: TVeiculo);
    procedure SetHash(const Value: String);
    procedure SetVeiculoAtual(const Value: TVeiculo);
  published
   property Id: Integer read FId write SetId;
   property Cliente: TCliente read FCliente write SetCliente;
   property Veiculo: TVeiculo read FVeiculo write SetVeiculo;
   property VeiculoAtual: TVeiculo read FVeiculoAtual write SetVeiculoAtual;
   property DataLocacao: TDateTime read FDataLocacao write SetDataLocacao;
   property DataDevolucao: TDateTime read FDataDevolucao write SetDataDevolucao;
   property Total: Currency read FTotal write SetTotal;
   property Hash: String read FHash write SetHash;

   procedure ValidarRegrasNegocios;
   function CalcularTotal: Currency;

   constructor Create;

 end;

implementation

{ TLocacao }

function TLocacao.CalcularTotal: Currency;
var
  nTotal: Currency;
  iQtdDias: Integer;
begin
  nTotal   := 0;
  iQtdDias := 1;

  if(FDataLocacao   <> StrToDate('30/12/1899'))and
    (FDataDevolucao <> StrToDate('30/12/1899')) then
  begin
    iQtdDias := DaysBetween(FDataLocacao, FDataDevolucao);

    if iQtdDias <= 0 then
      iQtdDias := 1;

  end;

  nTotal := iQtdDias *  FVeiculo.Valor;

  Result := nTotal;
end;

constructor TLocacao.Create;
begin
  FHash := IntToStr(Self.GetHashCode);
end;

procedure TLocacao.SetCliente(const Value: TCliente);
begin
  FCliente := Value;
end;

procedure TLocacao.SetDataDevolucao(const Value: TDateTime);
begin
  FDataDevolucao := Value;
end;

procedure TLocacao.SetDataLocacao(const Value: TDateTime);
begin
  FDataLocacao := Value;
end;

procedure TLocacao.SetHash(const Value: String);
begin
  FHash := Value;
end;

procedure TLocacao.SetId(const Value: Integer);
begin
  FId := Value;
end;

procedure TLocacao.SetTotal(const Value: Currency);
begin
  FTotal := Value;
end;

procedure TLocacao.SetVeiculo(const Value: TVeiculo);
begin
  FVeiculo := Value;
end;

procedure TLocacao.SetVeiculoAtual(const Value: TVeiculo);
begin
  FVeiculoAtual := Value;
end;

procedure TLocacao.ValidarRegrasNegocios;
begin
  if FCliente = nil then
  begin
    ExceptionLocacaoCliente;
  end;

  if FVeiculo = nil then
  begin
    ExceptionLocacaoVeiculo;
  end;

  if FVeiculo.Status = Alugado then
  begin
    ExceptionValorVeiculo;
  end;
end;

end.
